type: "MARKDOWN_NOTE"
folder: "3c2d0a64fbae751d51f9"
title: "A General Problem Solving Approach"
content: '''
  # A General Problem Solving Approach
  
  ## The "PEDAC" Problem Solving Process
  
  * Understand the **P**roblem
  * **E**xamples / Test Cases
  * **D**ata Structure and **A**lgorithms
  * **C**ode
  
  > Spend time with the problems before you spend time with the solution.
  
  ## Understanding the Problem and Writing Test Cases
  ```
  Small Code Challenge Problems
    - 20 - 45 minutes
    - typical solutions: 10-40 LOC
    - used extensively in interviews for a reason
      - mastery on a language
      - logic / reasoning
      - communications
    - not a skill that you "acquire and file away", but needs a lot of practice
  
  Understand the Problem
    - requirements are explicit
      - take notes
      - the odd words problem
    - requirements are not so explicit and need to be modeled
      - examples need to be described in computational words
      - diamond of stars
    - implicit knowledge needs to be captured
      - convert to explicit rules, in computational language
      - what century is that
    - identifying and defining important terms and concepts
      - queen attack
      - same row; same column; esp. same diagonal
    - ask questions to verify your understanding!
  
  Examples / Test Cases
    - Input / Output
    - Test cases serve two purposes:
      - help you understand the problem
      - allow you to verify your solution
    - happy paths
      - combination of requirements; the "obvious" result
    - Edge cases
      - focus on input
      - emptiness (nil/null, "", [], {})
      - boundary conditions
      - repetition / duplication
      - data types
    - Failures / Bad Input
      - raise exceptions / report errors
      - return a special value (nil/null, 0, "", [] etc)
    - ask questions to verify your understanding!
  ```
  
  ## Data Structure and Algorithms
  ```
  Data Structure
    - input data
    - rules/requirements as data
      - hash / object
  
    - string, array, hash/object, number
      - string
        - concact, strip, reverse, etc
        - Regular Expression! split, replace, match...
      - array
        - need to walk through it (iteration)
        - index
        - abstractions!!
          - map
          - reduce
          - select/filter
          - all
          - ...
      - hash/object
        - lookup table / dictionary
        - partition data for more efficient access downstream
        - digest
      - number
        - math operations
        - number as string may have advantage over numbers
    - compound data structures
      - array of arrays
      - hash with array/object values, etc
  
  Algorithm
    - Algorithms have to be described in the language of chosen data structure!
      - "then solve it" doesn't count
    - Have to be really fluent with
      - String / Regex
      - Array
        - Ruby: Enumerable
        - JavaScript: Higher-Order Functions
      - Hash / Object
        - Creation (default values)
        - Access (default values)
        - Iteration
    - verify your algorithm with your examples / test cases
  ```
  
'''
tags: []
isStarred: false
createdAt: "2017-10-04T13:50:04.903Z"
updatedAt: "2017-10-04T14:39:38.315Z"
