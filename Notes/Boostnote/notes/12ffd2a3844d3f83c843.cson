type: "MARKDOWN_NOTE"
folder: "3ba3bb99555fe4ed6b20"
title: "109 Assessment Review"
content: '''
  # 109 Assessment Review
  ## Beginning Ruby - Part 1
  ### Outline
  - Reading Ruby's syntactical sugar
  - Where does the code come from?
  - Variable scope
  
  ### Syntactical Sugar
  Method Invocation - parentheses are optional
  Ex: `puts "hello"` vs `puts("hello")`
  They mean the same thing.
  
  A method will invoke a method after a local variable. The local variable will take precedence.
  ```ruby
  str = "string"
  def str
    "method"
  end
  p str   # => will output local variable ("string")
  p(str)  # => will output the method ("method")
  ```
  ### Where does code come from?
  ruby-doc.org - official ruby documentation
  - core API
  - standard API
  - external libraries (gems) (use `require`)
  - your own external files (use `require_relative`)
  
  ### Local Variable Scope
  ```ruby
  arr = [1, 2, 3, 4]
  
  counter = 0
  sum = 0
  loop do
    sum += arr[counter]
    counter += 1
    break if counter == arr.size
  end
  
  puts "your total is #{sum}"
  ```
  3 local variables used (`arr`, `counter`, `sum`)
  are they accessible in the loop? Are they accessible for the `puts` method?
  
  Yes. The loop constitutes a block which allows local variables to be accessible.
  
  If `new_var = 'something'` is located on the last line of the loop then it will not be accessible outside of the loop.
  
  Initialized outside a loop, accessible inside loop.
  Initialize inside a loop, not accessible outside loop.
  
  ## Beginning Ruby - Part 2
  ### Outline
  - pass by reference vs pass by value
  - variables as pointers
  - method side-effects vs return value
  
  #### Pass By Reference vs Pass By value
  ```ruby
  def amethod(param)
  
  end
  
  str = "hello"
  amethod(str)
  
  p str # => str remains "hello"
  ```
  ```ruby
  def amethod(param)
    str += " world"
  end
  
  str = "hello"
  amethod(str) # => returns error because str does not exist inside method
  
  p str
  ```
  ```ruby
  def amethod(param)
    param += " world"
  end
  
  str = "hello"
  amethod(str) # => returns new string object with no effect on str
  
  p str # => str remains "hello"
  ```
  ```ruby
  def amethod(param)
    param << " world"
  end
  
  str = "hello"
  amethod(str) # => str is modified because << mutates the caller
  
  p str # => str is now "hello world"
  ```
  ```ruby
  def amethod(param)
    param += " world" # => param = param + " world" (reassignment) (no mutation)
    param + " world"  # => string concatenation - param.+(" world")
    param << " world" # => (mutation)
  end
  ```
  There is a huge difference between `+=` and `+` when used with strings.
  ```ruby
  def amethod(param)
    param + " universe"  # => string concatenation - param.+(" world")
    param << " world" # => (mutation)
  end
  p str # => "hello world"
  ```
  ```ruby
  def amethod(param)      # param = str
    param += " universe"  # => param = param + " universe" (no mutation) - This is reassignment, creates as a new object
    # => param is no longer pointing to the same object that str is pointing to
    param << " world"     # => (mutation)
  end
  p str # => "hello"
  ```
  This will output "hello". This is because param is now reassigned to a new object. It is now pointing to a new location in memory. Then on the next line, `param << " world"` is adds " world" to the new location, a new string object. But the original object was not mutated.
  
  ### Variables as Pointers
  ```ruby
  a = "hello"
  b = a
  b << " world"
  
  # ---- 2 variables; 1 object
  
  puts a  # => "hello, world"
  puts b  # => "hello, world"
  
  a = "hey" # a is now reassigned to a new object
  # ---- 2 variables; 2 objects
  b << " universe"
  
  puts a  # => "hey" - This is reassignment
  puts b  # => "hello, world universe"
  
  ```
  ![Variables as Pointers 1](https://d2aw5xe2jldque.cloudfront.net/books/ruby/images/variables_pointers1.jpg)
  ![Variables as Pointers 2](https://d2aw5xe2jldque.cloudfront.net/books/ruby/images/variables_pointers2.jpg)
  ### Method Side-Effects vs Return Value
  ```ruby
  def prefix(str)
    "Mr. " + str  # => this is reassignment, returns a new string that is not captured
  end
  
  name = 'joe'
  prefix(name)
  
  puts name   # => 'joe'
  ```
  One fix
  ```ruby
  def prefix(str)
    "Mr. " + str  # => this is reassignment, returns a new string that is not captured
  end
  
  name = 'joe'
  name prefix(name)
  
  puts name   # => 'joe'
  ```
  Another fix
  ```ruby
  def prefix!(str)
    "Mr. " << str  # => this is mutation
  end
  
  name = 'joe'
  prefix!(name)
  
  puts name   # => 'joe'
  ```
  __Do not__ create a method that makes a permanent change to a variable ( a side-effect) and has an important return value.
  ## Beginning Ruby - Part 3
  ### Outline
  - Arrays and Hashes
  - Common mistakes when using `select` and `map`, and the `Enumerable` module
  
  ### Collections
  What is a "data structure" or "collection?"
  - A collection is a type of data structure that refers to a group of objects.
    - Array - a series of elements retrievable by an integer index
      - ex: [4, 3, 2, 1]
    - Hash -  a series of elements retrievable by a key:value pair
      - ex: {:a => 1} or {a: 1}
      - remember anything can be a key but if symbols are used as keys know that they are immutable.
  
  What is the difference between an Array and Hash
  - order
  - index vs key retrieval
  - arrays can have duplicates, but hash keys are unique
  
  ### Array
  - iterate over an array of number, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], and print out each value (loop vs iteration)
  
  ```ruby
  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  idx = 0
  loop do
    puts arr[idx]
    idx += 1
    break if idx == arr.size
  end
  # outputs the array sequentially
  # returns nil
  ```
  ```ruby
  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  array.each do |n|
    puts arr[idx]
  end
  # outputs the array sequentially
  # return the original array
  ```
  - same as above  except print out the number only if the value is greater than 5
  
  ```ruby
  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  array.each do |n|
    puts arr[idx] if n > 5
  end
  ```
  Append 12 to the end of the array
  ```ruby
  arr << 12
  
  p arr
  ```
  Prepend 0 to the beginning of the array
  ```ruby
  arr.unshift(0)
  ```
  Remove the 12, and append a 3
  ```ruby
  arr.pop
  arr << 3
  p arr
  ```
  Remove duplicates using 1 method (i.e., don't loop or iterate)
  ```ruby
  arr.uniq! # => mutates the caller (#uniq does not mutate caller)
  p arr
  ```
  Extract all odd numbers into a new array
  ```ruby
  # select returns a new array that meets the criteria specified in the block
  arr.select { |n| n.odd? }
  
  odd = arr.select do |n|
    n + 1
  end
  # this should print out every number since (n + 1) is always truthy
  # definition of select #2
  # select returns a new array when the block evaluate to true
  
  odds = arr.select do |n|
    n + 1
    puts n
  end
  # this code will evaluate to false on every occasion (the return value of puts)
  
  # select returns a new array based on the block's *return value*. If the return value evaluates to true, then the element is selected.
  ```
  __select__ returns a new array based on the block's *return value*. If the return value evaluates to true, then the element is selected.
  Increment all numbers by 1 (transformation - new vs mutation)
  ```ruby
  # map returns a new array based on the transformation specified in the block
  incremented = arr.map { |n| n + 1 }
  
  # map returns a new array based on the block's *return value*. Each element is transformed based on the return value
  incremented = arr.map do |n|
    n > 1
  
  end
  ```
  __map__ returns a new array based on the block's *return value*. Each element is transformed based on the return value
  ### Hash
  Suppose you have a hash `hsh = {a:1, b:2, c:3, d:4}`
  Get the value of "b"
  ```ruby
  hsh["b"] # => it's nil since :b is a symbol
  hsh[:b]
  ```
  Add this key/value pair to the hash: {e: 5}
  ```ruby
  hsh[:e] = 5
  ```
  iterate over the hash and print out the keys and values
  ```ruby
  hsh.each do |k, v|
    puts "key is #{k}, value is #{v}"
  end
  ```
  print out key/value pairs where the value is less than 3.5
  ```ruby
  hsh.each do |k, v|
    puts "key is #{k}, value is #{v}" if v < 3.5
  end
  ```
  return a new hash where value is less than 3.5
  ```ruby
  small_vals = hsh.select do |k, v|
    v < 3.5
  end
  ```
  delete all key/value pairs where value is less than 3.5
  ```ruby
  small_vals = hsh.delete_if do |k, v|
    v < 3.5
  end
  ```
  ### Other
  - can an array contain hashes? vice versa?
    - of course
  - modifying an array value in a hash
  - modifying a hash element in an array
  - both of these can be tricky. Modifying a variable that is a value of a hash or an array will change the hash or array as well since variables are simply pointers to objects.
  
  ### Common Methods
  - `#all?`
  - `#any?`
  - `#first`
  - `#max`
  - `#min`
  - `#reject`
  
  ## Debugging
  - temperament
  - code with intention
  - fanatical attention to details
  
  ### General Approach
  - reproduce the error consistently
  - figure out a solution
  - pay attention to "code smells"
  
  ### Tool
  - puts vs print vs p
  - paying attention to return val vs output, and terminal vs irb
  - pry
  - rubber duck
  - walking away (after loading problem into brain)
  - debugger
  
  ### Methods
  - extract to method
  - consistent naming scheme
    - methods may all be verbs
  - if method outputs, prepend the name (ex: print_names or display_names)
  - if mutating, append name with !
  
'''
tags: []
isStarred: false
createdAt: "2017-05-22T00:40:26.725Z"
updatedAt: "2017-06-13T23:20:48.274Z"
